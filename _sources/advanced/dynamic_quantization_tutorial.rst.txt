
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'as' b'"' b'becoming' b'the' b'chorus' b'of' b'the' b'female' b'"' b'.' b'It' b'is' b'also' b'reported' b'@-@' b'native' b'as' b'possible' b','
    b'and' b'instead' b'stated' b'that' b'he' b'is' b'"' b'making' b'the' b"'" b'shocking' b'championship' b'"' b',' b'with' b'several' b'1866' b'surviving' b'advisers' b'having'
    b'begun' b'more' b'than' b'a' b'spoken' b'lie' b'.' b'However' b',' b'while' b'a' b'season' b'migrate' b',' b'he' b'gained' b'100' b'years' b'on' b'its'
    b'previous' b'drive' b'.' b'The' b'Washington' b'Pradesh' b'Association' b'could' b'be' b'distinguished' b',' b'and' b'could' b'cause' b'an' b'series' b'\xe2\x80\x93' b'copyrighted' b'cannon' b'.'
    b'The' b'water' b'was' b'indicted' b'to' b'help' b'that' b'point' b',' b'because' b'to' b'be' b'more' b'a' b'likely' b'particularly' b'variable' b'mature' b'.' b'A'
    b'overwhelming' b'ability' b'to' b'be' b'distant' b'in' b'terms' b',' b'but' b'Thomas' b'al' b'helped' b'they' b'co' b'of' b'the' b'best' b'the' b'best' b'religious'
    b'!' b'"' b'Boom' b'Fear' b'"' b',' b'where' b'he' b'recorded' b'doubt' b'from' b'Terry' b'Burrows' b"'s" b'Lewis' b';' b'in' b'his' b'final' b'manner'
    b'at' b'the' b'association' b'with' b'the' b'A.V.' b'Commission' b'<unk>' b'numbers' b',' b'<unk>' b'Hall' b'Results' b'.' b'renovate' b'after' b'he' b'has' b'received' b'respect'
    b'his' b'four' b'secrets' b'out' b'married' b'sites' b'in' b'his' b'studies' b'.' b'These' b'original' b'publishers' b'show' b'<unk>' b'<unk>' b'that' b'had' b'<unk>' b'growing'
    b'such' b'as' b'The' b'game' b"'s" b'head' b'pop' b'parrot' b'and' b'utilized' b'a' b'Nachtigall' b'disagree' b'there' b'.' b'a' b'review' b'of' b'Miller' b"'"
    b'Editor' b'@-@' b'<unk>' b'<unk>' b'(' b'John' b'Grey' b')' b'Text' b'estimated' b'their' b'wife' b'distribution' b',' b'taking' b'it' b'back' b'to' b'strongly' b'associate'
    b'his' b'diary' b',' b'the' b'promote' b'famine' b'by' b'his' b'nephew' b"'s" b'daughter' b'for' b'recommendations' b'.' b'What' b"'s" b'vocals' b'the' b'background' b'to'
    b'read' b'a' b'error' b'and' b'equipment' b'statement' b'which' b'O' b"'t" b'intensify' b'Tufaro' b'<unk>' b'.' b'Many' b'of' b'these' b'members' b'they' b'can' b'be'
    b'reflected' b'after' b'participating' b'into' b'the' b'movie' b'.' b'Carter' b'showed' b'<unk>' b',' b'Mr' b'Seymour' b',' b'MonarC' b'<unk>' b',' b'patron' b',' b'globular'
    b'Nf6' b',' b'Jesse' b'Williams' b',' b'and' b'Milhouse' b'see' b'standards' b'to' b'George' b'and' b'Thomas' b'<unk>' b'.' b'The' b'<unk>' b'Anderson' b'began' b'gradually'
    b'to' b'be' b'"' b'inhabited' b'a' b'Xinhua' b'to' b'a' b'nominal' b'customer' b'performance' b'"' b'.' b'When' b'in' b'what' b'teams' b'does' b'not' b'happen'
    b'feeling' b'that' b'"' b'Hamels' b'will' b'be' b'delayed' b',' b'I' b'turn' b'to' b'stand' b'because' b'this' b'private' b'biographies' b'of' b'the' b'general' b'defence'
    b'"' b'.' b'The' b'<unk>' b'sequel' b'with' b'Jo' b'norms' b'his' b'attention' b'to' b'O.' b'Laura' b'politics' b'<unk>' b'E.' b'le' b'Lester' b'Lorne' b'Eliot'
    b"'s" b'lead' b'resisted' b'.' b'<eos>' b'A' b'spear' b'on' b'March' b'5' b',' b'1960' b',' b'including' b'qualifiers' b',' b'was' b'published' b'as' b'one'
    b'of' b'its' b'Choice' b"'s" b'sister' b"'" b'basketball' b'premises' b',' b'who' b'\xe2\x80\x94' b'might' b'prevent' b'this' b'trip' b'to' b'put' b'their' b'skills' b'.'
    b'He' b'Immortal' b'the' b'foray' b'where' b'C.R.U.S.H.' b'hired' b'he' b',' b'despite' b'his' b'biographer' b'as' b'September' b'18' b',' b'Tour' b'his' b'<unk>' b'to'
    b'her' b'powerful' b'front' b'appointed' b'<unk>' b',' b'rowed' b'by' b'in' b'1992' b'from' b'Broadcasting' b"'s" b'character' b'.' b'The' b'Concorde' b'Deakin' b'failed' b'to'
    b'quit' b'a' b'college' b'invitation' b',' b'stating' b'that' b'the' b'target' b'on' b'Sunday' b'reflected' b'his' b'value' b'he' b'could' b'acknowledge' b'prehistoric' b'and' b'it'
    b'was' b'two' b'years' b',' b'C\xc3\xa9cile' b',' b'as' b'he' b'outweighed' b'a' b'routine' b'system' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Influence' b'=' b'='
    b'<eos>' b'<eos>' b'<unk>' b'in' b'Deadly' b'Boom' b'Forest' b'died' b'in' b'conjunction' b'with' b'its' b'family' b'murder' b'that' b'<unk>' b'@-@' b'John' b'Governor' b'was'
    b'only' b'winger' b'.' b'<unk>' b'Duncan' b'Jains' b'says' b'that' b'Wilde' b'was' b'detained' b'for' b'"' b'emotional' b'institutions' b'rockets' b'"' b',' b'a' b'Regard'
    b'about' b'his' b'<unk>' b':' b'"' b'The' b'political' b'funds' b'to' b'<unk>' b'.' b'outward' b'he' b'made' b')' b'to' b'aided' b'hockey' b',' b'no'
    b'very' b'impossible' b'operation' b'to' b'be' b'advanced' b'in' b'idea' b',' b'inside' b'his' b'strong' b'independent' b'short' b'as' b'deep' b'as' b'slightly' b'for' b'the'
    b'<unk>' b'and' b'<unk>' b',' b'and' b'that' b'you' b'hares' b'.' b'"' b'On' b'Pedro' b'cricketing' b',' b'her' b'fall' b',' b'on' b'four' b'Japanese'
    b'stories' b'Hollywood' b'<unk>' b'major' b'stories' b',' b'were' b'praised' b'in' b'film' b';' b'a' b'once' b'man' b'also' b'influenced' b'it' b'there' b'Herald' b'and'
    b'"' b'strong' b'Mariah' b'"' b':' b'"' b'On' b'a' b'Pulse' b'of' b'anti' b'@-@' b'<unk>' b'and' b'is' b'important' b'for' b'his' b'loss' b"'m"
    b'...' b'I' b"'ll" b'1036' b'my' b'wrong' b'no' b'an' b'mock' b'season' b'"' b'.' b'In' b'October' b'1885' b'the' b'"' b'Oxford' b'<unk>' b'Dear'
    b'"' b'outdoors' b'sometime' b'in' b'Odriozola' b'oh' b',' b'<unk>' b'rests' b'using' b'non' b'@-@' b'<unk>' b'including' b'Benjamin' b'Kitana' b'.' b'The' b'portrayal' b'travelling'
    b'in' b'release' b'<unk>' b',' b'overwhelmingly' b'O.' b'Crowe' b',' b'and' b'Henry' b"'s" b'often' b'hold' b'in' b'mod' b'Mirror' b'about' b'he' b'wrote' b'Wizards'
    b'Ceres' b'whose' b'girl' b'could' b'chose' b'to' b'avoid' b'(' b'beef' b')' b',' b'Supervisor' b'Scott' b'Mochan' b'(' b'2007' b')' b';' b'Doctor' b'Chandler'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Professional' b'owner' b'Jallon' b'=' b'=' b'<eos>' b'<eos>' b'Common' b'starlings' b'of' b'Ceres' b'died' b'incidents' b',' b'with'
    b'its' b'assistant' b'hire' b"'Andrade" b'.' b'The' b'mount' b'rock' b'Meyers' b'may' b'be' b'demolished' b'by' b'Admiral' b'Falls' b',' b'which' b'said' b'that' b'this'
    b'new' b'opposition' b'were' b'widely' b'from' b'commit' b'capacity' b',' b'such' b'as' b'<unk>' b'Waldo' b'Williams' b'as' b'a' b'32' b'@-@' b'established' b'bowler' b','
    b'though' b'advanced' b'with' b'its' b'trademark' b'have' b'been' b'discovered' b'just' b'.' b'A' b'magazine' b'not' b'said' b'that' b'was' b'revenge' b'into' b'<unk>' b"'"
    b'awkward' b'wardrobe' b',' b'especially' b'says' b'that' b'why' b'...' b'Cumbria' b'has' b'recently' b'a' b'true' b'"' b'poor' b'training' b'version' b'"' b'"' b'heard'
    b'<unk>' b'with' b'Catholic' b'literature' b'"' b'.' b'John' b'Wilson' b',' b'a' b'takeover' b'in' b'the' b'Manor' b'who' b'briefly' b'convinces' b'Bunbury' b',' b'described'
    b'it' b'more' b'professor' b'dressed' b',' b'with' b'his' b'character' b'.' b'<unk>' b',' b'"' b'I' b'think' b'us' b',' b'<unk>' b'the' b'sense' b'of'
    b'public' b'morale' b"'" b'struggle' b'into' b'the' b'world' b'and' b'their' b'bottom' b'.' b'"' b'On' b'March' b'17' b',' b'2007' b',' b'Hornung' b'had'
    b'sold' b'France' b',' b'Matt' b'Kirk' b',' b'and' b'economical' b'a' b'fellow' b'army' b'around' b'him' b'.' b'Amanda' b'and' b'alerted' b'had' b'to' b'have'
    b'spent' b'@-@' b'1' b':' b'over' b'over' b'5' b'%' b'of' b'the' b'maximum' b'pieces' b',' b'primarily' b're' b'@-@' b'Matters' b'between' b'Raffles' b'and'
    b'cargo' b'products' b'.' b'In' b'the' b'1909' b'release' b',' b'O' b"'Malley" b'sent' b'a' b'accuracy' b'of' b'poor' b'evidence' b'.' b'After' b'an' b'faiths'
    b'after' b'these' b'nights' b',' b'Chat' b'his' b'tail' b'reviews' b'acquired' b'in' b'office' b',' b'are' b'not' b'negative' b'.' b'<eos>' b'The' b'FIA' b'of'
    b'The' b'Ecclestone' b'<unk>' b'Mandel' b'of' b'FISA' b'decided' b'to' b'be' b'essentially' b'temporarily' b'quickly' b'ranked' b'to' b'use' b'service' b'after' b'his' b'president' b';'
    b'the' b'<unk>' b'were' b'Gay' b'.' b'Despite' b'the' b'<unk>' b'"' b'official' b'schools' b'"' b',' b'#' b'7' b'held' b';' b'Elizabeth' b'averaged' b'for'
    b'wood' b'stories' b'by' b'Terria' b'and' b'persistent' b'the' b'Viscount' b'<unk>' b'items' b'in' b'October' b'1999' b',' b'but' b'controls' b'of' b'his' b'children' b'in'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 182.1
    loss: 5.168
    elapsed time (seconds): 106.7




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  57.763 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
