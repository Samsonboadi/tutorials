
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Kelly' b'.' b'<eos>' b'In' b'response' b'in' b'its' b'large' b'training' b'ring' b',' b'separates' b'military' b'star' b'ribbon' b',' b'celebrated' b'against' b'three' b'goals'
    b'without' b'some' b'he' b'return' b'to' b'at' b'1' b':' b'45' b'\xe2\x80\x93' b'45' b'remaining' b',' b'and' b'so' b'watching' b'it' b'they' b'could' b'give'
    b'themselves' b'to' b'myself' b'.' b'These' b'countries' b'evenly' b'within' b'children' b',' b'beginning' b'to' b'be' b'a' b'diameter' b'of' b'no' b'deep' b'or' b'bird'
    b'actions' b'by' b'<unk>' b'number' b'would' b'be' b'changed' b'.' b'If' b'there' b'is' b'new' b'streaks' b',' b'they' b'rarely' b'easy' b'or' b'Shea' b'material'
    b'had' b'more' b'older' b'than' b'Remembrance' b'articles' b'.' b'Margot' b'as' b'well' b'as' b'those' b'to' b'Georgian' b'pews' b',' b'she' b'stopped' b'his' b'eggs'
    b',' b'separated' b'not' b'into' b'workers' b',' b'Corbet' b'seem' b'to' b'arrive' b'up' b'with' b'the' b'British' b'being' b'<unk>' b'and' b'<unk>' b'by' b'its'
    b'abdomen' b'.' b'Despite' b'no' b'development' b'from' b'measures' b'proved' b',' b'1' b'@.@' b'5' b'years' b'for' b'the' b'river' b'are' b'45' b'combat' b'percent'
    b'of' b'ambitious' b'microscopy' b'.' b'One' b',' b'a' b'foray' b'was' b'introduced' b'back' b',' b'with' b'any' b'wait' b'of' b'Astraeus' b',' b'by' b'age'
    b',' b'termed' b'for' b'age' b'to' b'her' b'.' b'planetary' b'damage' b'may' b'often' b'be' b'eaten' b'by' b'making' b'astronomical' b'challenges' b'from' b'an' b'prolific'
    b'<unk>' b'.' b'Both' b'sur' b'Weyden' b'when' b'to' b'become' b'ready' b'to' b'be' b'faculty' b',' b'to' b'their' b'godly' b'Attempts' b',' b'<unk>' b'applicable'
    b'hot' b'characters' b':' b'speaking' b'.' b'To' b'oxygen' b'the' b'light' b'at' b'these' b'@-@' b'level' b'drive' b'45' b'@.@' b'5' b'or' b'160' b'birds'
    b',' b'it' b'follows' b'males' b'until' b'which' b'lost' b'the' b'false' b'fault' b'as' b'it' b'pitched' b'vegetation' b')' b'.' b'By' b'heavier' b'.' b'At'
    b'18' b'@,@' b'000' b'(' b'47' b'%' b'for' b'seven' b'passion' b'involved' b'in' b'concrete' b'KwaZulu' b'females' b'(' b'females' b')' b',' b'which' b'are'
    b'first' b'injured' b'from' b'its' b'base' b'.' b'<eos>' b'Domnall' b'Metrodome' b'pencils' b'relationships' b'on' b'160' b'stages' b',' b'containing' b'an' b'divinities' b'that' b'also'
    b'extinct' b'by' b'their' b'internal' b'rules' b'.' b'The' b'kakapo' b'feed' b'on' b'14' b'November' b'1935' b',' b'and' b'for' b'218' b'through' b'the' b'deadly'
    b'<unk>' b'.' b'It' b'is' b'a' b'less' b'distinct' b'player' b'to' b'collect' b'symmetrical' b'predict' b',' b'and' b'since' b'an' b'high' b'kilometres' b'around' b'the'
    b'males' b':' b'the' b'other' b'form' b',' b'three' b'other' b'facilitated' b',' b'rather' b'than' b'one' b'Prudential' b'legs' b'exist' b'the' b'highest' b'male' b'way'
    b',' b'and' b'no' b'longer' b'lower' b'causes' b'pipes' b'.' b'Weber' b'divides' b'with' b'thus' b'required' b'a' b'middle' b'hydrostatic' b'Congregationalists' b',' b'but' b'worked'
    b'down' b'40' b'times' b'through' b'the' b'planet' b"'" b'fire' b'smallest' b'in' b'the' b'ibis' b'.' b'During' b'their' b'father' b"'s" b'death' b',' b'this'
    b'male' b'was' b'pale' b'walled' b',' b'very' b'in' b'the' b'dangers' b'and' b'whereabouts' b'of' b'career' b',' b'responsibility' b',' b'but' b'female' b'food' b'instruments'
    b'may' b'improve' b'.' b'Traffic' b'and' b'reports' b'stray' b'significant' b'movement' b';' b'they' b'cannot' b'explain' b'greyish' b',' b'HURDAT' b',' b'trying' b'to' b'voltage'
    b'air' b'growth' b'and' b'Scales' b'pointed' b',' b'one' b'who' b'only' b'expresses' b'them' b',' b'which' b'they' b'do' b',' b'although' b'they' b'ylides' b'on'
    b'the' b'Rain' b'Ridge' b'.' b'A' b'small' b'@-@' b'level' b'wings' b'factors' b'that' b'overlap' b'from' b'law' b'such' b'as' b'Diplocystis' b'(' b'<unk>' b')'
    b':' b'the' b'21st' b'.' b'The' b'slave' b'is' b'perfectly' b'close' b'to' b'develop' b'148' b'colour' b'areas' b'until' b'14' b'%' b'of' b'irregular' b'proteins'
    b',' b'which' b'includes' b'prevent' b'abnormalities' b'in' b'the' b'var.' b'environment' b'.' b'Given' b'this' b'population' b',' b'they' b'cannot' b'explode' b'in' b'long' b'repellent'
    b'fresh' b'.' b'<unk>' b'males' b'were' b'forecast' b'for' b'performed' b'with' b'periods' b'and' b'a' b'lasting' b'ring' b',' b'so' b'some' b'were' b'good' b'from'
    b'them' b',' b'they' b'destroy' b'how' b'it' b'rapidly' b'your' b'last' b'copy' b'of' b'vegetation' b'work' b'.' b'This' b"'" b'will' b'be' b'seen' b'probably'
    b'in' b'the' b'minute' b'.' b'This' b'bird' b'may' b'be' b'controlled' b'by' b'their' b'new' b'sheep' b'orchestra' b',' b'when' b'they' b'occur' b'when' b'they'
    b'thin' b'to' b'that' b'of' b'power' b'.' b'the' b'third' b'classes' b'is' b'consumed' b'by' b'hydrogen' b',' b'so' b'on' b'present' b'eye' b',' b'they'
    b'can' b'they' b'<unk>' b'their' b'eyes' b'.' b'Having' b'shut' b'out' b',' b'and' b'others' b'may' b'seize' b'God' b"'" b'or' b'13' b'eggs' b'.'
    b'Despite' b'this' b'other' b'eukaryotes' b'of' b'450' b',' b'when' b'their' b'food' b'is' b'usually' b'predominant' b'or' b've' b'eating' b',' b'they' b'stop' b'them'
    b'breeding' b'sessions' b'.' b'There' b'are' b'that' b'even' b'called' b'But' b'distantly' b',' b'so' b'also' b'can' b'have' b'support' b'BTEC' b'.' b'M.' b'cirrhifer'
    b'was' b'also' b'engaged' b'in' b'dry' b'range' b'but' b'they' b'is' b'Machinery' b',' b'but' b'there' b'have' b'no' b'least' b'direct' b'signs' b'of' b'vague'
    b'pleasure' b'.' b'This' b'fission' b'into' b'certain' b'.' b'posture' b'has' b'numerous' b'citation' b'such' b'under' b'infection' b',' b'except' b'classic' b'<unk>' b'from' b'young'
    b'females' b'.' b'These' b'behaviour' b'loves' b'mRNA' b'when' b'they' b'are' b'seen' b'to' b'be' b'divorced' b'.' b'<eos>' b'The' b'kakapo' b'of' b'starling' b'@-@'
    b'green' b'are' b'spiders' b'.' b'Then' b',' b'they' b'treat' b'prospectors' b'@-@' b'shaped' b'bird' b'shaped' b'mitosis' b',' b'and' b'can' b'indicate' b'that' b'they'
    b'are' b'somewhat' b'reduced' b'to' b'birds' b'who' b'often' b'requested' b'for' b'they' b'are' b'weakest' b'.' b'As' b'they' b'arrive' b',' b'they' b'no' b'the'
    b'head' b'to' b'be' b'scattered' b'.' b'similarities' b',' b'it' b'is' b'commonly' b'only' b'if' b'males' b'may' b'help' b'them' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'Establishment' b'=' b'=' b'<eos>' b'<eos>' b'Mycena' b'photons' b'have' b'a' b'length' b'of' b'69' b'\xe2\x80\x93' b'4' b'\xc2\xb5m' b',' b'6' b'of' b'lanthanides'
    b',' b'calculations' b',' b'and' b'traffic' b',' b'entering' b'<unk>' b'food' b',' b'compared' b'to' b'20' b'\xc2\xb0' b'F' b'(' b'48' b'<unk>' b')' b','
    b'markings' b',' b'over' b'20' b'and' b'5' b'mg' b'(' b'51' b'\xe2\x80\x93' b'22' b'lb' b')' b'to' b'be' b'older' b'of' b'wings' b',' b'comprising'
    b'much' b'thirty' b'@-@' b'functional' b'species' b',' b'according' b'to' b'some' b'other' b'affectionate' b'cameras' b',' b'while' b'those' b'of' b'those' b'of' b'the' b'Texas'
    b'starling' b'of' b'Mycena' b'.' b'With' b'a' b'sexual' b'battle' b',' b'gravity' b'on' b'other' b'male' b'spots' b',' b'is' b'white' b',' b'it' b'was'
    b'poorly' b'endemic' b'1' b'\xe2\x80\x93' b'4' b'.' b'The' b'interior' b'Supervisors' b'they' b'stretched' b',' b'the' b'Honourable' b'of' b'Souvenirs' b',' b'flies' b'into' b'red'
    b'gills' b',' b'cars' b'and' b'or' b'wing' b'exist' b',' b'and' b'leave' b'by' b'borrowed' b'throughout' b'a' b'droppings' b'Play' b'and' b'ashtaka' b'as' b'they'
    b'<unk>' b'their' b'ECU' b'.' b'In' b'V' b'(' b'USA' b')' b',' b'common' b'parasites' b'are' b'dependent' b'on' b'this' b'other' b'cautious' b'so' b'computation'
    b'and' b'remain' b'from' b'<unk>' b',' b'frogs' b'and' b'white' b',' b'resulting' b'from' b'long' b'attacks' b'.' b'Although' b'construction' b'reduced' b'they' b'possessed' b'the'
    b'eggs' b'in' b'churchwardens' b',' b'it' b'takes' b'care' b'of' b'any' b'time' b',' b'given' b'hook' b'for' b'long' b'deposits' b'of' b'survey' b'.' b'As'
    b'the' b'female' b'County' b'processes' b'safe' b',' b'even' b',' b'by' b'1' b'@.@' b'5' b'@.@' b'5' b'years' b',' b'can' b'be' b'children' b'used'
    b'in' b'36' b'conifers' b',' b'except' b'15' b'%' b'associated' b'from' b'teenagers' b'.' b'Also' b'before' b'they' b'cost' b',' b'they' b'only' b'put' b'access'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 185.9
    loss: 5.168
    elapsed time (seconds): 107.0




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  1.237 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
