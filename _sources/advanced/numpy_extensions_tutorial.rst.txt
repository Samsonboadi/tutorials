
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 0.1348,  4.9395, 16.1871,  7.7600, 11.7962],
            [ 3.9138,  7.1339,  7.4062,  3.1831,  3.7458],
            [ 2.7649,  2.3228,  7.7507, 10.2308,  3.5418],
            [ 7.4034,  5.0434,  7.4683,  3.5248,  6.3862],
            [16.1790, 10.1562,  3.8193,  3.9105,  4.7771],
            [ 7.4034,  3.0833,  3.2603,  7.7879,  6.3862],
            [ 2.7649, 19.8396, 11.8072, 17.4428,  3.5418],
            [ 3.9138, 14.5582,  7.4614,  9.1166,  3.7458]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8775,  0.1989,  0.0208, -1.1622,  0.1990, -0.7578, -0.8608,  1.0324],
            [ 2.5323,  1.5368, -1.4305,  0.7475, -0.7985, -2.5252, -0.8959,  0.5331],
            [-0.0031,  1.3957, -0.6906,  2.0078,  1.8970, -0.8950, -0.8680, -0.3757],
            [-0.3036,  0.9528, -0.4600, -1.5244,  0.0733,  0.5401, -0.0975, -0.2293],
            [-0.6812,  1.2909,  0.7067, -0.8718,  0.7394,  0.9017, -0.7881,  2.1801],
            [-0.0709, -1.5886, -0.5782,  0.5995, -0.5214, -0.8012, -1.1346, -0.5113],
            [-0.5284,  0.4270, -0.7086,  2.2766,  0.5603,  1.5560,  0.0632, -0.9828],
            [ 0.0209,  0.3052, -2.4359, -1.7423,  1.1846,  0.5655, -0.8500,  0.8854]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.3856,  1.3254, -0.3111],
            [-0.3358, -0.5459, -0.9224],
            [ 0.0836, -1.0171,  0.3704]], requires_grad=True), Parameter containing:
    tensor([[-0.0368]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.9809, -2.1938, -5.8468,  1.4400,  4.6959,  1.8966, -1.6067, -1.6611],
            [-0.1196, -1.0703,  3.3895,  1.5410,  1.3809, -0.5583, -2.3160,  0.0095],
            [-3.0716, -0.8080,  2.3673,  0.3562, -3.7473, -4.7907, -2.7984,  0.2003],
            [ 5.1204,  1.6662,  1.4556, -3.0724,  2.6791,  3.9685,  3.4089,  1.7339],
            [-0.8114, -1.1414,  0.7125, -0.0887,  1.6846, -0.8731,  1.3441, -1.2197],
            [-5.2725,  2.2891,  3.4793,  0.9207,  1.8353, -0.3410,  0.1482,  2.4377],
            [ 4.4777,  4.3268, -2.0181, -1.2431, -0.9259,  0.6689,  0.2130, -3.5660],
            [ 2.8449, -7.3848, -6.6022, -3.3348, -3.3586,  1.1391,  4.2296,  0.8791]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3324, -1.2420, -2.2127,  1.1402,  1.5564,  1.0933,  1.7014, -1.0941,
             -1.2438,  0.2694],
            [ 0.9135,  1.1066,  3.6870,  2.1508, -1.5828, -0.0079, -1.7685, -3.4145,
             -2.0861,  1.3492],
            [ 0.1328,  0.3579, -0.8789, -2.6308, -3.1842,  0.8231, -0.4584,  2.2755,
              0.9103,  1.5016],
            [-0.0572,  1.1159,  2.3980, -4.1251,  1.5261, -4.2077, -1.3988, -1.1279,
             -1.1043,  0.3259],
            [ 0.7308,  0.5440, -2.9115,  1.1767,  5.9336,  3.1718,  2.8869, -3.0510,
             -0.8083,  1.6199],
            [ 1.3890, -1.1919, -4.8087, -2.2543, -1.0997, -2.2763,  0.5673, -0.9778,
              0.6263,  1.7227],
            [-1.2786, -5.0718, -6.4302,  2.4260, -1.5868,  2.3303,  0.8719,  1.5585,
              1.5441,  0.4329],
            [-0.0654,  0.5532,  6.8181,  4.0387,  3.8082, -2.1057, -0.2252, -3.9402,
              0.8645, -0.4806],
            [ 0.0371,  0.3918,  1.9323, -0.0681, -1.5204,  0.1510, -0.4714,  0.2676,
              0.8504,  0.3705],
            [-0.0234,  0.3426, -0.7518, -0.3810, -0.1129,  0.2838, -0.0089,  0.5523,
              0.1345, -0.1312]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.056 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
