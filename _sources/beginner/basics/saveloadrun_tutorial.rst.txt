
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/basics/saveloadrun_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_basics_saveloadrun_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_basics_saveloadrun_tutorial.py:


`Learn the Basics <intro.html>`_ ||
`Quickstart <quickstart_tutorial.html>`_ ||
`Tensors <tensorqs_tutorial.html>`_ ||
`Datasets & DataLoaders <data_tutorial.html>`_ ||
`Transforms <transforms_tutorial.html>`_ ||
`Build Model <buildmodel_tutorial.html>`_ ||
`Autograd <autogradqs_tutorial.html>`_ ||
`Optimization <optimization_tutorial.html>`_ ||
**Save & Load Model**

Save and Load the Model
============================

In this section we will look at how to persist model state with saving, loading and running model predictions.

.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: default


    import torch
    import torchvision.models as models









.. GENERATED FROM PYTHON SOURCE LINES 23-28

Saving and Loading Model Weights
--------------------------------
PyTorch models store the learned parameters in an internal
state dictionary, called ``state_dict``. These can be persisted via the ``torch.save``
method:

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: default


    model = models.vgg16(weights='IMAGENET1K_V1')
    torch.save(model.state_dict(), 'model_weights.pth')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/vgg16-397923af.pth" to /var/lib/jenkins/.cache/torch/hub/checkpoints/vgg16-397923af.pth

      0%|          | 0.00/528M [00:00<?, ?B/s]
      0%|          | 936k/528M [00:00<00:58, 9.46MB/s]
      0%|          | 1.98M/528M [00:00<00:53, 10.4MB/s]
      1%|          | 3.09M/528M [00:00<00:50, 10.9MB/s]
      1%|          | 4.29M/528M [00:00<00:47, 11.5MB/s]
      1%|1         | 5.49M/528M [00:00<00:46, 11.9MB/s]
      1%|1         | 6.79M/528M [00:00<00:43, 12.5MB/s]
      2%|1         | 8.14M/528M [00:00<00:41, 13.0MB/s]
      2%|1         | 9.53M/528M [00:00<00:40, 13.5MB/s]
      2%|2         | 11.0M/528M [00:00<00:38, 14.1MB/s]
      2%|2         | 12.6M/528M [00:01<00:36, 14.7MB/s]
      3%|2         | 14.2M/528M [00:01<00:35, 15.3MB/s]
      3%|2         | 15.8M/528M [00:01<00:33, 15.8MB/s]
      3%|3         | 17.5M/528M [00:01<00:32, 16.5MB/s]
      4%|3         | 19.3M/528M [00:01<00:31, 17.1MB/s]
      4%|3         | 21.1M/528M [00:01<00:30, 17.6MB/s]
      4%|4         | 22.9M/528M [00:01<00:29, 18.1MB/s]
      5%|4         | 24.9M/528M [00:01<00:27, 18.9MB/s]
      5%|5         | 26.9M/528M [00:01<00:27, 19.4MB/s]
      5%|5         | 29.0M/528M [00:01<00:25, 20.1MB/s]
      6%|5         | 31.0M/528M [00:02<00:25, 20.6MB/s]
      6%|6         | 33.2M/528M [00:02<00:24, 21.2MB/s]
      7%|6         | 35.5M/528M [00:02<00:23, 21.9MB/s]
      7%|7         | 37.8M/528M [00:02<00:22, 22.6MB/s]
      8%|7         | 40.2M/528M [00:02<00:21, 23.3MB/s]
      8%|8         | 42.6M/528M [00:02<00:21, 23.7MB/s]
      9%|8         | 45.0M/528M [00:02<00:20, 24.1MB/s]
      9%|9         | 47.6M/528M [00:02<00:20, 25.1MB/s]
     10%|9         | 50.2M/528M [00:02<00:19, 25.9MB/s]
     10%|#         | 52.9M/528M [00:02<00:18, 26.3MB/s]
     11%|#         | 55.5M/528M [00:03<00:18, 26.8MB/s]
     11%|#1        | 58.3M/528M [00:03<00:17, 27.5MB/s]
     12%|#1        | 61.3M/528M [00:03<00:17, 28.4MB/s]
     12%|#2        | 64.2M/528M [00:03<00:16, 29.1MB/s]
     13%|#2        | 67.1M/528M [00:03<00:16, 29.5MB/s]
     13%|#3        | 70.1M/528M [00:03<00:16, 29.9MB/s]
     14%|#3        | 73.1M/528M [00:03<00:15, 30.3MB/s]
     14%|#4        | 76.3M/528M [00:03<00:15, 31.0MB/s]
     15%|#5        | 79.5M/528M [00:03<00:14, 31.8MB/s]
     16%|#5        | 82.7M/528M [00:03<00:14, 32.4MB/s]
     16%|#6        | 86.0M/528M [00:04<00:14, 32.9MB/s]
     17%|#6        | 89.5M/528M [00:04<00:13, 34.0MB/s]
     18%|#7        | 93.0M/528M [00:04<00:13, 34.6MB/s]
     18%|#8        | 96.6M/528M [00:04<00:12, 35.5MB/s]
     19%|#8        | 100M/528M [00:04<00:12, 35.7MB/s] 
     20%|#9        | 104M/528M [00:04<00:12, 36.2MB/s]
     20%|##        | 107M/528M [00:04<00:12, 36.3MB/s]
     21%|##        | 111M/528M [00:04<00:11, 36.7MB/s]
     22%|##1       | 115M/528M [00:04<00:11, 37.6MB/s]
     22%|##2       | 118M/528M [00:04<00:11, 38.4MB/s]
     23%|##3       | 122M/528M [00:05<00:10, 39.7MB/s]
     24%|##3       | 126M/528M [00:05<00:10, 40.5MB/s]
     25%|##4       | 131M/528M [00:05<00:10, 41.3MB/s]
     26%|##5       | 135M/528M [00:05<00:09, 41.6MB/s]
     26%|##6       | 139M/528M [00:05<00:09, 42.0MB/s]
     27%|##7       | 143M/528M [00:05<00:09, 42.4MB/s]
     28%|##7       | 147M/528M [00:05<00:09, 42.5MB/s]
     29%|##8       | 151M/528M [00:05<00:09, 42.7MB/s]
     29%|##9       | 156M/528M [00:05<00:08, 43.6MB/s]
     30%|###       | 160M/528M [00:05<00:08, 44.9MB/s]
     31%|###1      | 165M/528M [00:06<00:08, 46.0MB/s]
     32%|###2      | 170M/528M [00:06<00:08, 46.9MB/s]
     33%|###2      | 174M/528M [00:06<00:07, 47.4MB/s]
     34%|###3      | 179M/528M [00:06<00:07, 47.9MB/s]
     35%|###4      | 184M/528M [00:06<00:07, 48.3MB/s]
     36%|###5      | 188M/528M [00:06<00:07, 48.5MB/s]
     37%|###6      | 193M/528M [00:06<00:07, 48.5MB/s]
     37%|###7      | 198M/528M [00:06<00:07, 48.5MB/s]
     38%|###8      | 202M/528M [00:06<00:06, 49.1MB/s]
     39%|###9      | 208M/528M [00:06<00:06, 50.6MB/s]
     40%|####      | 213M/528M [00:07<00:06, 51.9MB/s]
     41%|####1     | 218M/528M [00:07<00:06, 52.7MB/s]
     42%|####2     | 223M/528M [00:07<00:05, 53.4MB/s]
     43%|####3     | 229M/528M [00:07<00:05, 53.9MB/s]
     44%|####4     | 234M/528M [00:07<00:05, 54.2MB/s]
     45%|####5     | 239M/528M [00:07<00:05, 54.5MB/s]
     46%|####6     | 245M/528M [00:07<00:05, 54.9MB/s]
     47%|####7     | 250M/528M [00:07<00:05, 55.0MB/s]
     48%|####8     | 256M/528M [00:07<00:05, 56.3MB/s]
     50%|####9     | 261M/528M [00:07<00:04, 57.7MB/s]
     51%|#####     | 267M/528M [00:08<00:04, 58.6MB/s]
     52%|#####1    | 273M/528M [00:08<00:04, 59.3MB/s]
     53%|#####2    | 279M/528M [00:08<00:04, 59.9MB/s]
     54%|#####3    | 285M/528M [00:08<00:04, 60.2MB/s]
     55%|#####5    | 291M/528M [00:08<00:04, 60.6MB/s]
     56%|#####6    | 296M/528M [00:08<00:04, 60.7MB/s]
     57%|#####7    | 302M/528M [00:08<00:03, 61.0MB/s]
     58%|#####8    | 308M/528M [00:08<00:03, 62.2MB/s]
     60%|#####9    | 315M/528M [00:08<00:03, 63.4MB/s]
     61%|######    | 321M/528M [00:08<00:03, 64.7MB/s]
     62%|######2   | 328M/528M [00:09<00:03, 65.3MB/s]
     63%|######3   | 334M/528M [00:09<00:03, 66.1MB/s]
     65%|######4   | 341M/528M [00:09<00:02, 66.3MB/s]
     66%|######5   | 347M/528M [00:09<00:02, 66.6MB/s]
     67%|######6   | 354M/528M [00:09<00:02, 66.8MB/s]
     68%|######8   | 360M/528M [00:09<00:02, 66.9MB/s]
     69%|######9   | 367M/528M [00:09<00:02, 67.8MB/s]
     71%|#######   | 374M/528M [00:09<00:02, 69.3MB/s]
     72%|#######2  | 381M/528M [00:09<00:02, 70.3MB/s]
     73%|#######3  | 388M/528M [00:09<00:02, 71.0MB/s]
     75%|#######4  | 395M/528M [00:10<00:01, 71.7MB/s]
     76%|#######6  | 402M/528M [00:10<00:01, 72.2MB/s]
     77%|#######7  | 408M/528M [00:10<00:01, 72.5MB/s]
     79%|#######8  | 415M/528M [00:10<00:01, 72.7MB/s]
     80%|########  | 423M/528M [00:10<00:01, 73.0MB/s]
     81%|########1 | 430M/528M [00:10<00:01, 73.4MB/s]
     83%|########2 | 437M/528M [00:10<00:01, 74.9MB/s]
     84%|########4 | 445M/528M [00:10<00:01, 76.2MB/s]
     86%|########5 | 452M/528M [00:10<00:01, 76.9MB/s]
     87%|########7 | 460M/528M [00:10<00:00, 77.7MB/s]
     89%|########8 | 467M/528M [00:11<00:00, 78.1MB/s]
     90%|######### | 475M/528M [00:11<00:00, 78.8MB/s]
     92%|#########1| 483M/528M [00:11<00:00, 80.6MB/s]
     93%|#########3| 492M/528M [00:11<00:00, 82.4MB/s]
     95%|#########4| 500M/528M [00:11<00:00, 83.4MB/s]
     96%|#########6| 509M/528M [00:11<00:00, 85.8MB/s]
     98%|#########8| 517M/528M [00:11<00:00, 87.5MB/s]
    100%|#########9| 526M/528M [00:11<00:00, 87.5MB/s]
    100%|##########| 528M/528M [00:11<00:00, 47.0MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 33-35

To load model weights, you need to create an instance of the same model first, and then load the parameters
using ``load_state_dict()`` method.

.. GENERATED FROM PYTHON SOURCE LINES 35-40

.. code-block:: default


    model = models.vgg16() # we do not specify ``weights``, i.e. create untrained model
    model.load_state_dict(torch.load('model_weights.pth'))
    model.eval()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    VGG(
      (features): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (6): ReLU(inplace=True)
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (8): ReLU(inplace=True)
        (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (11): ReLU(inplace=True)
        (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (13): ReLU(inplace=True)
        (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (15): ReLU(inplace=True)
        (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (18): ReLU(inplace=True)
        (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (20): ReLU(inplace=True)
        (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (22): ReLU(inplace=True)
        (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (25): ReLU(inplace=True)
        (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (27): ReLU(inplace=True)
        (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (29): ReLU(inplace=True)
        (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
      (classifier): Sequential(
        (0): Linear(in_features=25088, out_features=4096, bias=True)
        (1): ReLU(inplace=True)
        (2): Dropout(p=0.5, inplace=False)
        (3): Linear(in_features=4096, out_features=4096, bias=True)
        (4): ReLU(inplace=True)
        (5): Dropout(p=0.5, inplace=False)
        (6): Linear(in_features=4096, out_features=1000, bias=True)
      )
    )



.. GENERATED FROM PYTHON SOURCE LINES 41-42

.. note:: be sure to call ``model.eval()`` method before inferencing to set the dropout and batch normalization layers to evaluation mode. Failing to do this will yield inconsistent inference results.

.. GENERATED FROM PYTHON SOURCE LINES 44-49

Saving and Loading Models with Shapes
-------------------------------------
When loading model weights, we needed to instantiate the model class first, because the class
defines the structure of a network. We might want to save the structure of this class together with
the model, in which case we can pass ``model`` (and not ``model.state_dict()``) to the saving function:

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default


    torch.save(model, 'model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 53-54

We can then load the model like this:

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default


    model = torch.load('model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 58-59

.. note:: This approach uses Python `pickle <https://docs.python.org/3/library/pickle.html>`_ module when serializing the model, thus it relies on the actual class definition to be available when loading the model.

.. GENERATED FROM PYTHON SOURCE LINES 61-64

Related Tutorials
-----------------
`Saving and Loading a General Checkpoint in PyTorch <https://pytorch.org/tutorials/recipes/recipes/saving_and_loading_a_general_checkpoint.html>`_


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  17.428 seconds)


.. _sphx_glr_download_beginner_basics_saveloadrun_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: saveloadrun_tutorial.py <saveloadrun_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: saveloadrun_tutorial.ipynb <saveloadrun_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
