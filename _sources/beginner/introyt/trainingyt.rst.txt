
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/trainingyt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_trainingyt.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_trainingyt.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
**Training Models** ||
`Model Understanding <captumyt.html>`_

Training with PyTorch
=====================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=jF43_wj_DCQ>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/jF43_wj_DCQ" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

Introduction
------------

In past videos, we’ve discussed and demonstrated:

- Building models with the neural network layers and functions of the torch.nn module
- The mechanics of automated gradient computation, which is central to
  gradient-based model training 
- Using TensorBoard to visualize training progress and other activities

In this video, we’ll be adding some new tools to your inventory:

- We’ll get familiar with the dataset and dataloader abstractions, and how
  they ease the process of feeding data to your model during a training loop 
- We’ll discuss specific loss functions and when to use them
- We’ll look at PyTorch optimizers, which implement algorithms to adjust
  model weights based on the outcome of a loss function

Finally, we’ll pull all of these together and see a full PyTorch
training loop in action.


Dataset and DataLoader
----------------------
 
The ``Dataset`` and ``DataLoader`` classes encapsulate the process of
pulling your data from storage and exposing it to your training loop in
batches.

The ``Dataset`` is responsible for accessing and processing single
instances of data.
 
The ``DataLoader`` pulls instances of data from the ``Dataset`` (either
automatically or with a sampler that you define), collects them in
batches, and returns them for consumption by your training loop. The
``DataLoader`` works with all kinds of datasets, regardless of the type
of data they contain.
 
For this tutorial, we’ll be using the Fashion-MNIST dataset provided by
TorchVision. We use ``torchvision.transforms.Normalize()`` to
zero-center and normalize the distribution of the image tile content,
and download both training and validation data splits.

.. GENERATED FROM PYTHON SOURCE LINES 65-96

.. code-block:: default


    import torch
    import torchvision
    import torchvision.transforms as transforms

    # PyTorch TensorBoard support
    from torch.utils.tensorboard import SummaryWriter
    from datetime import datetime


    transform = transforms.Compose(
        [transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))])

    # Create datasets for training & validation, download if necessary
    training_set = torchvision.datasets.FashionMNIST('./data', train=True, transform=transform, download=True)
    validation_set = torchvision.datasets.FashionMNIST('./data', train=False, transform=transform, download=True)

    # Create data loaders for our datasets; shuffle for training, not for validation
    training_loader = torch.utils.data.DataLoader(training_set, batch_size=4, shuffle=True)
    validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=4, shuffle=False)

    # Class labels
    classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
            'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

    # Report split sizes
    print('Training set has {} instances'.format(len(training_set)))
    print('Validation set has {} instances'.format(len(validation_set)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz

      0%|          | 0/26421880 [00:00<?, ?it/s]
      0%|          | 32768/26421880 [00:00<01:28, 298349.02it/s]
      0%|          | 65536/26421880 [00:00<01:28, 297201.40it/s]
      0%|          | 131072/26421880 [00:00<01:00, 432182.57it/s]
      1%|          | 229376/26421880 [00:00<00:42, 612462.57it/s]
      2%|1         | 491520/26421880 [00:00<00:20, 1246370.53it/s]
      4%|3         | 950272/26421880 [00:00<00:11, 2231032.35it/s]
      7%|7         | 1933312/26421880 [00:00<00:05, 4394070.61it/s]
     15%|#4        | 3833856/26421880 [00:00<00:02, 8479188.09it/s]
     26%|##6       | 6914048/26421880 [00:00<00:01, 14533324.71it/s]
     38%|###7      | 10027008/26421880 [00:01<00:00, 18704186.30it/s]
     49%|####9     | 13074432/26421880 [00:01<00:00, 21442127.12it/s]
     61%|######1   | 16187392/26421880 [00:01<00:00, 23447464.72it/s]
     73%|#######3  | 19300352/26421880 [00:01<00:00, 24869663.13it/s]
     83%|########3 | 22020096/26421880 [00:01<00:00, 24768708.36it/s]
     95%|#########4| 25100288/26421880 [00:01<00:00, 25681879.13it/s]
    100%|##########| 26421880/26421880 [00:01<00:00, 15853791.74it/s]
    Extracting ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz

      0%|          | 0/29515 [00:00<?, ?it/s]
    100%|##########| 29515/29515 [00:00<00:00, 267593.45it/s]
    100%|##########| 29515/29515 [00:00<00:00, 266203.80it/s]
    Extracting ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz

      0%|          | 0/4422102 [00:00<?, ?it/s]
      1%|          | 32768/4422102 [00:00<00:14, 303213.85it/s]
      1%|1         | 65536/4422102 [00:00<00:14, 301240.02it/s]
      3%|2         | 131072/4422102 [00:00<00:09, 438527.46it/s]
      4%|4         | 196608/4422102 [00:00<00:08, 503135.12it/s]
      9%|8         | 393216/4422102 [00:00<00:04, 972739.76it/s]
     12%|#1        | 524288/4422102 [00:00<00:03, 1051231.65it/s]
     15%|#4        | 655360/4422102 [00:00<00:03, 1101812.96it/s]
     19%|#8        | 819200/4422102 [00:00<00:02, 1228272.51it/s]
     22%|##2       | 983040/4422102 [00:00<00:02, 1312692.59it/s]
     26%|##5       | 1146880/4422102 [00:01<00:02, 1372222.21it/s]
     30%|##9       | 1310720/4422102 [00:01<00:02, 1413015.95it/s]
     33%|###3      | 1474560/4422102 [00:01<00:02, 1441571.39it/s]
     37%|###7      | 1638400/4422102 [00:01<00:01, 1461501.60it/s]
     41%|####      | 1802240/4422102 [00:01<00:01, 1477073.86it/s]
     44%|####4     | 1966080/4422102 [00:01<00:01, 1485288.57it/s]
     49%|####8     | 2162688/4422102 [00:01<00:01, 1576976.64it/s]
     53%|#####2    | 2326528/4422102 [00:01<00:01, 1560009.14it/s]
     57%|#####7    | 2523136/4422102 [00:01<00:01, 1631923.91it/s]
     61%|######    | 2686976/4422102 [00:02<00:01, 1596256.21it/s]
     65%|######5   | 2883584/4422102 [00:02<00:00, 1656906.85it/s]
     70%|######9   | 3080192/4422102 [00:02<00:00, 1699151.21it/s]
     74%|#######4  | 3276800/4422102 [00:02<00:00, 1728514.16it/s]
     79%|#######8  | 3473408/4422102 [00:02<00:00, 1749280.94it/s]
     83%|########2 | 3670016/4422102 [00:02<00:00, 1767134.32it/s]
     87%|########7 | 3866624/4422102 [00:02<00:00, 1779338.33it/s]
     92%|#########1| 4063232/4422102 [00:02<00:00, 1787580.66it/s]
     96%|#########6| 4259840/4422102 [00:02<00:00, 1794010.60it/s]
    100%|##########| 4422102/4422102 [00:02<00:00, 1498562.58it/s]
    Extracting ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz

      0%|          | 0/5148 [00:00<?, ?it/s]
    100%|##########| 5148/5148 [00:00<00:00, 28905323.95it/s]
    Extracting ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Training set has 60000 instances
    Validation set has 10000 instances




.. GENERATED FROM PYTHON SOURCE LINES 97-99

As always, let’s visualize the data as a sanity check:


.. GENERATED FROM PYTHON SOURCE LINES 99-123

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    # Helper function for inline image display
    def matplotlib_imshow(img, one_channel=False):
        if one_channel:
            img = img.mean(dim=0)
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        if one_channel:
            plt.imshow(npimg, cmap="Greys")
        else:
            plt.imshow(np.transpose(npimg, (1, 2, 0)))

    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # Create a grid from the images and show them
    img_grid = torchvision.utils.make_grid(images)
    matplotlib_imshow(img_grid, one_channel=True)
    print('  '.join(classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :alt: trainingyt
   :srcset: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sandal  Trouser  Coat  Trouser




.. GENERATED FROM PYTHON SOURCE LINES 124-130

The Model
---------

The model we’ll use in this example is a variant of LeNet-5 - it should
be familiar if you’ve watched the previous videos in this series.


.. GENERATED FROM PYTHON SOURCE LINES 130-158

.. code-block:: default


    import torch.nn as nn
    import torch.nn.functional as F

    # PyTorch models inherit from torch.nn.Module
    class GarmentClassifier(nn.Module):
        def __init__(self):
            super(GarmentClassifier, self).__init__()
            self.conv1 = nn.Conv2d(1, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 4 * 4, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 4 * 4)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    

    model = GarmentClassifier()









.. GENERATED FROM PYTHON SOURCE LINES 159-166

Loss Function
-------------

For this example, we’ll be using a cross-entropy loss. For demonstration
purposes, we’ll create batches of dummy output and label values, run
them through the loss function, and examine the result.


.. GENERATED FROM PYTHON SOURCE LINES 166-182

.. code-block:: default


    loss_fn = torch.nn.CrossEntropyLoss()

    # NB: Loss functions expect data in batches, so we're creating batches of 4
    # Represents the model's confidence in each of the 10 classes for a given input
    dummy_outputs = torch.rand(4, 10)
    # Represents the correct class among the 10 being tested
    dummy_labels = torch.tensor([1, 5, 3, 7])
    
    print(dummy_outputs)
    print(dummy_labels)

    loss = loss_fn(dummy_outputs, dummy_labels)
    print('Total loss for this batch: {}'.format(loss.item()))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[4.8470e-01, 6.7109e-01, 2.1748e-01, 5.0061e-01, 1.2856e-01, 5.6537e-01,
             4.8373e-01, 7.2517e-01, 1.6615e-01, 7.1995e-01],
            [1.3740e-01, 3.4510e-01, 8.4360e-01, 8.5317e-01, 6.7799e-01, 3.1265e-01,
             8.2688e-01, 9.5637e-01, 2.8950e-02, 2.8431e-01],
            [9.9169e-01, 8.4711e-01, 1.6942e-01, 9.2433e-01, 2.7509e-01, 5.9646e-01,
             6.4547e-01, 7.7043e-01, 9.6173e-01, 1.4904e-01],
            [1.3656e-01, 5.3657e-01, 1.6256e-01, 1.2321e-01, 5.5340e-01, 4.5432e-01,
             2.8106e-01, 2.0914e-01, 7.0544e-01, 5.9390e-04]])
    tensor([1, 5, 3, 7])
    Total loss for this batch: 2.2945127487182617




.. GENERATED FROM PYTHON SOURCE LINES 183-200

Optimizer
---------

For this example, we’ll be using simple `stochastic gradient
descent <https://pytorch.org/docs/stable/optim.html>`__ with momentum.

It can be instructive to try some variations on this optimization
scheme:

- Learning rate determines the size of the steps the optimizer
  takes. What does a different learning rate do to the your training
  results, in terms of accuracy and convergence time?
- Momentum nudges the optimizer in the direction of strongest gradient over
  multiple steps. What does changing this value do to your results? 
- Try some different optimization algorithms, such as averaged SGD, Adagrad, or
  Adam. How do your results differ?


.. GENERATED FROM PYTHON SOURCE LINES 200-205

.. code-block:: default


    # Optimizers specified in the torch.optim package
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 206-225

The Training Loop
-----------------

Below, we have a function that performs one training epoch. It
enumerates data from the DataLoader, and on each pass of the loop does
the following:

- Gets a batch of training data from the DataLoader
- Zeros the optimizer’s gradients 
- Performs an inference - that is, gets predictions from the model for an input batch
- Calculates the loss for that set of predictions vs. the labels on the dataset
- Calculates the backward gradients over the learning weights
- Tells the optimizer to perform one learning step - that is, adjust the model’s
  learning weights based on the observed gradients for this batch, according to the
  optimization algorithm we chose
- It reports on the loss for every 1000 batches.
- Finally, it reports the average per-batch loss for the last
  1000 batches, for comparison with a validation run


.. GENERATED FROM PYTHON SOURCE LINES 225-262

.. code-block:: default


    def train_one_epoch(epoch_index, tb_writer):
        running_loss = 0.
        last_loss = 0.
    
        # Here, we use enumerate(training_loader) instead of
        # iter(training_loader) so that we can track the batch
        # index and do some intra-epoch reporting
        for i, data in enumerate(training_loader):
            # Every data instance is an input + label pair
            inputs, labels = data
        
            # Zero your gradients for every batch!
            optimizer.zero_grad()
        
            # Make predictions for this batch
            outputs = model(inputs)
        
            # Compute the loss and its gradients
            loss = loss_fn(outputs, labels)
            loss.backward()
        
            # Adjust learning weights
            optimizer.step()
        
            # Gather data and report
            running_loss += loss.item()
            if i % 1000 == 999:
                last_loss = running_loss / 1000 # loss per batch
                print('  batch {} loss: {}'.format(i + 1, last_loss))
                tb_x = epoch_index * len(training_loader) + i + 1
                tb_writer.add_scalar('Loss/train', last_loss, tb_x)
                running_loss = 0.
            
        return last_loss









.. GENERATED FROM PYTHON SOURCE LINES 263-276

Per-Epoch Activity
~~~~~~~~~~~~~~~~~~

There are a couple of things we’ll want to do once per epoch: 

- Perform validation by checking our relative loss on a set of data that was not
  used for training, and report this 
- Save a copy of the model

Here, we’ll do our reporting in TensorBoard. This will require going to
the command line to start TensorBoard, and opening it in another browser
tab.


.. GENERATED FROM PYTHON SOURCE LINES 276-322

.. code-block:: default


    # Initializing in a separate cell so we can easily add more epochs to the same run
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    writer = SummaryWriter('runs/fashion_trainer_{}'.format(timestamp))
    epoch_number = 0

    EPOCHS = 5

    best_vloss = 1_000_000.

    for epoch in range(EPOCHS):
        print('EPOCH {}:'.format(epoch_number + 1))
    
        # Make sure gradient tracking is on, and do a pass over the data
        model.train(True)
        avg_loss = train_one_epoch(epoch_number, writer)
    
        # We don't need gradients on to do reporting
        model.train(False)
    
        running_vloss = 0.0
        for i, vdata in enumerate(validation_loader):
            vinputs, vlabels = vdata
            voutputs = model(vinputs)
            vloss = loss_fn(voutputs, vlabels)
            running_vloss += vloss
    
        avg_vloss = running_vloss / (i + 1)
        print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))
    
        # Log the running loss averaged per batch
        # for both training and validation
        writer.add_scalars('Training vs. Validation Loss',
                        { 'Training' : avg_loss, 'Validation' : avg_vloss },
                        epoch_number + 1)
        writer.flush()
    
        # Track best performance, and save the model's state
        if avg_vloss < best_vloss:
            best_vloss = avg_vloss
            model_path = 'model_{}_{}'.format(timestamp, epoch_number)
            torch.save(model.state_dict(), model_path)
    
        epoch_number += 1






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    EPOCH 1:
      batch 1000 loss: 1.7680801182687282
      batch 2000 loss: 0.863701558791101
      batch 3000 loss: 0.7170401037409901
      batch 4000 loss: 0.6509557620007544
      batch 5000 loss: 0.6062693863376044
      batch 6000 loss: 0.5510560752854217
      batch 7000 loss: 0.5246222023698501
      batch 8000 loss: 0.49983955221180804
      batch 9000 loss: 0.4671518288543448
      batch 10000 loss: 0.47960364691214635
      batch 11000 loss: 0.4676869610634167
      batch 12000 loss: 0.44778010196855755
      batch 13000 loss: 0.43273380567034475
      batch 14000 loss: 0.4165586315232795
      batch 15000 loss: 0.4224013655957533
    LOSS train 0.4224013655957533 valid 0.44828882813453674
    EPOCH 2:
      batch 1000 loss: 0.41031379413569813
      batch 2000 loss: 0.40141872570390114
      batch 3000 loss: 0.40336736142385055
      batch 4000 loss: 0.3800190051612444
      batch 5000 loss: 0.3817374853268848
      batch 6000 loss: 0.35737197911474505
      batch 7000 loss: 0.3885319546420942
      batch 8000 loss: 0.36866238752107894
      batch 9000 loss: 0.37549606300058075
      batch 10000 loss: 0.37198718058379016
      batch 11000 loss: 0.3442858698310447
      batch 12000 loss: 0.3437023684208398
      batch 13000 loss: 0.3579427976963052
      batch 14000 loss: 0.3426452986961522
      batch 15000 loss: 0.3470969729691569
    LOSS train 0.3470969729691569 valid 0.4118325710296631
    EPOCH 3:
      batch 1000 loss: 0.32080222667226915
      batch 2000 loss: 0.3367304060921597
      batch 3000 loss: 0.32585389625570677
      batch 4000 loss: 0.3315837846116774
      batch 5000 loss: 0.310859667088429
      batch 6000 loss: 0.33546265014473464
      batch 7000 loss: 0.3214024889177163
      batch 8000 loss: 0.34505072550071053
      batch 9000 loss: 0.33542031127645894
      batch 10000 loss: 0.34118641687936907
      batch 11000 loss: 0.3061997807560765
      batch 12000 loss: 0.3266067142851316
      batch 13000 loss: 0.3264508869809215
      batch 14000 loss: 0.32123293904121963
      batch 15000 loss: 0.3122021781735821
    LOSS train 0.3122021781735821 valid 0.32478049397468567
    EPOCH 4:
      batch 1000 loss: 0.281664712904676
      batch 2000 loss: 0.30825890235488257
      batch 3000 loss: 0.30150610262764893
      batch 4000 loss: 0.30197100541964755
      batch 5000 loss: 0.2985394448063744
      batch 6000 loss: 0.3073072727006365
      batch 7000 loss: 0.3057699628101473
      batch 8000 loss: 0.30887396130047273
      batch 9000 loss: 0.2977088849330794
      batch 10000 loss: 0.2829383934679718
      batch 11000 loss: 0.3158275955255285
      batch 12000 loss: 0.29278950648534735
      batch 13000 loss: 0.30244688442744155
      batch 14000 loss: 0.2958499039942144
      batch 15000 loss: 0.3040601169439178
    LOSS train 0.3040601169439178 valid 0.3364514708518982
    EPOCH 5:
      batch 1000 loss: 0.2682434105778866
      batch 2000 loss: 0.30014021298949956
      batch 3000 loss: 0.28179909642966233
      batch 4000 loss: 0.28600270550295137
      batch 5000 loss: 0.26488496466266226
      batch 6000 loss: 0.2777344479417625
      batch 7000 loss: 0.29036751817977347
      batch 8000 loss: 0.27659578420225805
      batch 9000 loss: 0.2625173667137351
      batch 10000 loss: 0.2868294264629376
      batch 11000 loss: 0.2971267351507468
      batch 12000 loss: 0.29039113695430385
      batch 13000 loss: 0.2664949442208067
      batch 14000 loss: 0.2791387889964238
      batch 15000 loss: 0.2718376643613274
    LOSS train 0.2718376643613274 valid 0.3224426507949829




.. GENERATED FROM PYTHON SOURCE LINES 323-365

To load a saved version of the model:

.. code:: python

    saved_model = GarmentClassifier()
    saved_model.load_state_dict(torch.load(PATH))

Once you’ve loaded the model, it’s ready for whatever you need it for -
more training, inference, or analysis.

Note that if your model has constructor parameters that affect model
structure, you’ll need to provide them and configure the model
identically to the state in which it was saved.

Other Resources
---------------

-  Docs on the `data
   utilities <https://pytorch.org/docs/stable/data.html>`__, including
   Dataset and DataLoader, at pytorch.org
-  A `note on the use of pinned
   memory <https://pytorch.org/docs/stable/notes/cuda.html#cuda-memory-pinning>`__
   for GPU training
-  Documentation on the datasets available in
   `TorchVision <https://pytorch.org/vision/stable/datasets.html>`__,
   `TorchText <https://pytorch.org/text/stable/datasets.html>`__, and
   `TorchAudio <https://pytorch.org/audio/stable/datasets.html>`__
-  Documentation on the `loss
   functions <https://pytorch.org/docs/stable/nn.html#loss-functions>`__
   available in PyTorch
-  Documentation on the `torch.optim
   package <https://pytorch.org/docs/stable/optim.html>`__, which
   includes optimizers and related tools, such as learning rate
   scheduling
-  A detailed `tutorial on saving and loading
   models <https://pytorch.org/tutorials/beginner/saving_loading_models.html>`__
-  The `Tutorials section of
   pytorch.org <https://pytorch.org/tutorials/>`__ contains tutorials on
   a broad variety of training tasks, including classification in
   different domains, generative adversarial networks, reinforcement
   learning, and more 



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  13.950 seconds)


.. _sphx_glr_download_beginner_introyt_trainingyt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: trainingyt.py <trainingyt.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: trainingyt.ipynb <trainingyt.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
